from typing import Any, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import EventType
import logging

from .doc_retriever import smart_retrieve, retrieve_answer

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

MAX_ANSWER_CHARS = 500  # Gi·∫£m xu·ªëng v√¨ th√¥ng tin ƒë√£ ƒë∆∞·ª£c tr√≠ch xu·∫•t ch√≠nh x√°c h∆°n


class ActionSearchDoc(Action):
    _call_count = 0  # ƒë·∫øm s·ªë l·∫ßn action ƒë∆∞·ª£c g·ªçi

    def name(self) -> str:
        return "action_search_doc"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[str, Any],
    ) -> List[EventType]:
        # ƒê·∫øm s·ªë l·∫ßn action ƒë∆∞·ª£c g·ªçi
        ActionSearchDoc._call_count += 1
        logger.info(f"ActionSearchDoc called {ActionSearchDoc._call_count} times")

        user_msg = tracker.latest_message.get("text", "").strip()
        logger.info(f"User message: {user_msg}")

        if not user_msg:
            dispatcher.utter_message(text="B·∫°n vui l√≤ng nh·∫≠p c√¢u h·ªèi.")
            return []

        try:
            # S·ª≠ d·ª•ng smart_retrieve ƒë·ªÉ c√≥ k·∫øt qu·∫£ t·ªët nh·∫•t
            results = smart_retrieve(user_msg, top_k=3, score_threshold=0.30)
            logger.info(f"Smart search results: {len(results)} chunks")

            if not results:
                # Th·ª≠ v·ªõi ng∆∞·ª°ng th·∫•p h∆°n n·∫øu kh√¥ng t√¨m th·∫•y
                results = smart_retrieve(user_msg, top_k=3, score_threshold=0.20)
                logger.info(f"Fallback search results: {len(results)} chunks")

            if not results:
                dispatcher.utter_message(
                    text="Xin l·ªói, m√¨nh kh√¥ng t√¨m ƒë∆∞·ª£c th√¥ng tin li√™n quan trong t√†i li·ªáu. "
                         "B·∫°n c√≥ th·ªÉ th·ª≠ di·ªÖn ƒë·∫°t c√¢u h·ªèi kh√°c kh√¥ng?"
                )
                return []

            # L·∫•y k·∫øt qu·∫£ t·ªët nh·∫•t
            score, extracted_text, meta = results[0]
            source_file = meta.get('filename', meta.get('file', 't√†i li·ªáu'))
            extraction_method = meta.get('extraction_method', 'unknown')
            
            logger.info(f"Best score: {score:.4f}, Source: {source_file}, Method: {extraction_method}")

            # X·ª≠ l√Ω c√¢u tr·∫£ l·ªùi
            answer = self._format_answer(extracted_text, score)
            
            # T·∫°o th√¥ng tin ngu·ªìn
            source_info = self._format_source_info(source_file, score, extraction_method)
            
            # Ki·ªÉm tra xem c√≥ k·∫øt qu·∫£ kh√°c c√≥ th·ªÉ h·ªØu √≠ch kh√¥ng
            additional_info = self._get_additional_info(results[1:] if len(results) > 1 else [])

            # G·ª≠i c√¢u tr·∫£ l·ªùi
            final_response = f"{answer}\n\n{source_info}"
            if additional_info:
                final_response += f"\n\n{additional_info}"

            dispatcher.utter_message(text=final_response)

        except Exception as e:
            logger.error(f"Error in ActionSearchDoc: {e}")
            dispatcher.utter_message(
                text="Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm th√¥ng tin. "
                     "Vui l√≤ng th·ª≠ l·∫°i sau."
            )

        return []

    def _format_answer(self, text: str, score: float) -> str:
        """
        Format c√¢u tr·∫£ l·ªùi, c·∫Øt g·ªçn n·∫øu c·∫ßn v√† th√™m ƒë·ªô tin c·∫≠y.
        """
        # C·∫Øt g·ªçn n·∫øu qu√° d√†i
        if len(text) > MAX_ANSWER_CHARS:
            # T√¨m ƒëi·ªÉm c·∫Øt t·ª± nhi√™n (cu·ªëi c√¢u)
            truncated = text[:MAX_ANSWER_CHARS]
            last_sentence_end = max(
                truncated.rfind('.'),
                truncated.rfind('!'),
                truncated.rfind('?')
            )
            
            if last_sentence_end > MAX_ANSWER_CHARS * 0.7:  # N·∫øu t√¨m ƒë∆∞·ª£c ƒëi·ªÉm c·∫Øt t·ªët
                text = truncated[:last_sentence_end + 1]
            else:
                text = truncated.rstrip() + "..."

        # Th√™m ƒë·ªô tin c·∫≠y n·∫øu th·∫•p
        if score < 0.4:
            confidence_note = " (Th√¥ng tin c√≥ th·ªÉ kh√¥ng ho√†n to√†n ch√≠nh x√°c)"
            text += confidence_note

        return text.strip()

    def _format_source_info(self, source_file: str, score: float, method: str) -> str:
        """
        T·∫°o th√¥ng tin ngu·ªìn v·ªõi ƒë·ªô tin c·∫≠y.
        """
        # L√†m s·∫°ch t√™n file
        if '/' in source_file or '\\' in source_file:
            source_file = source_file.split('/')[-1].split('\\')[-1]

        # Th√™m th√¥ng tin ƒë·ªô tin c·∫≠y
        if score >= 0.7:
            confidence = "R·∫•t tin c·∫≠y"
        elif score >= 0.5:
            confidence = "Tin c·∫≠y"
        elif score >= 0.3:
            confidence = "Kh√° tin c·∫≠y"
        else:
            confidence = "ƒê·ªô tin c·∫≠y th·∫•p"

        return f"üìÑ *Ngu·ªìn: {source_file}* | *ƒê·ªô tin c·∫≠y: {confidence}*"

    def _get_additional_info(self, other_results: List) -> str:
        """
        T·∫°o th√¥ng tin b·ªï sung t·ª´ c√°c k·∫øt qu·∫£ kh√°c n·∫øu c√≥.
        """
        if not other_results or len(other_results) == 0:
            return ""

        # Ki·ªÉm tra xem c√≥ k·∫øt qu·∫£ n√†o kh√°c c√≥ ƒëi·ªÉm cao kh√¥ng
        high_score_results = [r for r in other_results if r[0] >= 0.4]
        
        if not high_score_results:
            return ""

        # L·∫•y th√¥ng tin t·ª´ k·∫øt qu·∫£ t·ªët nh·∫•t th·ª© 2
        score, text, meta = high_score_results[0]
        source_file = meta.get('filename', meta.get('file', 't√†i li·ªáu kh√°c'))
        
        if '/' in source_file or '\\' in source_file:
            source_file = source_file.split('/')[-1].split('\\')[-1]

        # R√∫t g·ªçn th√¥ng tin b·ªï sung
        additional_text = text[:150].strip()
        if len(text) > 150:
            additional_text += "..."

        return f"üí° *Th√¥ng tin b·ªï sung t·ª´ {source_file}:*\n{additional_text}"


class ActionSearchDocDetailed(Action):
    """
    Action tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt h∆°n v·ªõi nhi·ªÅu ngu·ªìn.
    """
    
    def name(self) -> str:
        return "action_search_doc_detailed"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[str, Any],
    ) -> List[EventType]:
        user_msg = tracker.latest_message.get("text", "").strip()
        logger.info(f"Detailed search for: {user_msg}")

        if not user_msg:
            dispatcher.utter_message(text="B·∫°n vui l√≤ng nh·∫≠p c√¢u h·ªèi.")
            return []

        try:
            # L·∫•y nhi·ªÅu k·∫øt qu·∫£ h∆°n cho t√¨m ki·∫øm chi ti·∫øt
            results = smart_retrieve(user_msg, top_k=5, score_threshold=0.25)

            if not results:
                dispatcher.utter_message(
                    text="Kh√¥ng t√¨m th·∫•y th√¥ng tin chi ti·∫øt. "
                         "B·∫°n c√≥ th·ªÉ th·ª≠ v·ªõi c√¢u h·ªèi kh√°c kh√¥ng?"
                )
                return []

            # T·∫°o c√¢u tr·∫£ l·ªùi chi ti·∫øt
            response_parts = ["üîç *Th√¥ng tin chi ti·∫øt:*\n"]
            
            for i, (score, text, meta) in enumerate(results[:3], 1):
                source_file = meta.get('filename', f'Ngu·ªìn {i}')
                if '/' in source_file or '\\' in source_file:
                    source_file = source_file.split('/')[-1].split('\\')[-1]
                
                # Format t·ª´ng ph·∫ßn
                section = f"**{i}. T·ª´ {source_file}** (ƒêi·ªÉm: {score:.2f})\n"
                section += f"{text[:200]}{'...' if len(text) > 200 else ''}\n"
                response_parts.append(section)

            final_response = "\n".join(response_parts)
            
            # C·∫Øt g·ªçn n·∫øu qu√° d√†i
            if len(final_response) > 1000:
                final_response = final_response[:1000] + "\n\n*[ƒê√£ r√∫t g·ªçn do qu√° d√†i]*"

            dispatcher.utter_message(text=final_response)

        except Exception as e:
            logger.error(f"Error in ActionSearchDocDetailed: {e}")
            dispatcher.utter_message(text="C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm chi ti·∫øt.")

        return []


class ActionSearchDocContext(Action):
    """
    Action t√¨m ki·∫øm v·ªõi ng·ªØ c·∫£nh m·ªü r·ªông.
    """
    
    def name(self) -> str:
        return "action_search_doc_context"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[str, Any],
    ) -> List[EventType]:
        user_msg = tracker.latest_message.get("text", "").strip()
        
        if not user_msg:
            dispatcher.utter_message(text="B·∫°n vui l√≤ng nh·∫≠p c√¢u h·ªèi.")
            return []

        try:
            # S·ª≠ d·ª•ng context mode
            results = retrieve_answer(user_msg, top_k=3, extract_mode="context")
            
            if not results:
                dispatcher.utter_message(text="Kh√¥ng t√¨m th·∫•y ng·ªØ c·∫£nh ph√π h·ª£p.")
                return []

            score, context_text, meta = results[0]
            source_file = meta.get('filename', 't√†i li·ªáu')
            
            if '/' in source_file or '\\' in source_file:
                source_file = source_file.split('/')[-1].split('\\')[-1]

            response = f"üìñ *Ng·ªØ c·∫£nh t·ª´ {source_file}:*\n\n{context_text}"
            
            # Th√™m link ƒë·∫øn vƒÉn b·∫£n g·ªëc n·∫øu c√≥
            if meta.get('original_text'):
                response += f"\n\nüí≠ *G·ª£i √Ω: B·∫°n c√≥ th·ªÉ h·ªèi chi ti·∫øt h∆°n v·ªÅ n·ªôi dung n√†y.*"

            dispatcher.utter_message(text=response)

        except Exception as e:
            logger.error(f"Error in ActionSearchDocContext: {e}")
            dispatcher.utter_message(text="C√≥ l·ªói khi t√¨m ki·∫øm ng·ªØ c·∫£nh.")

        return []